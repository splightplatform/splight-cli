# used when a new feature has already been merged to master
# this step creates a new tag in the github repository, pushes the release
# version to pypi and deletes all dev versions
name: Release
on:
  push:
    branches:
      - master

env:
  LIBRARY_NAME: "splight-cli"

jobs:
  tag_version:
    runs-on: ubuntu-latest
    name: Create tag version on github repository
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Get version from feature branch
        run: echo "CURRENT_VERSION=$(grep -E 'version' cli/version.py | awk -F'"' '{ print $2 }')" >> "$GITHUB_ENV"

      - name: Create tag
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ env.CURRENT_VERSION }}
          tag_name: ${{ env.CURRENT_VERSION }}

  upload_release_to_pypi:
    runs-on: ubuntu-latest
    name: Upload release library version to pypi
    needs: [tag_version]
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  cleanup_pypi:
    runs-on: ubuntu-latest
    name: Remove all developer versions from pypi
    needs: [upload_release_to_pypi]
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      # install requests and pypi-cleanup
      - name: Install requirements
        run: pip install -r .github/workflows/scripts/requirements.txt

      - name: Get version from feature branch
        run: echo "CURRENT_VERSION=$(grep -E 'version' cli/version.py | awk -F'"' '{ print $2 }')" >> "$GITHUB_ENV"

      - name: Remove all developer versions from pypi
        run: python .github/workflows/scripts/cleanup_pypi.py $LIBRARY_NAME ${{ env.CURRENT_VERSION }} ${{ secrets.PYPI_USERNAME }} ${{ secrets.PYPI_PASSWORD}}

  upload_builder_image:
    runs-on: ubuntu-latest
    name: Push builder image to ECR
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push builder image
        working-directory: .
        run: |
          export VERSION=$(python setup.py --version)
          GITHUB_TOKEN=$GITHUB_TOKEN AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} docker-compose -f builder/docker-compose.yml build
          docker tag splight-builder $AWS_ECR/splight-jobs:builder-${VERSION}
          docker push $AWS_ECR/splight-jobs:builder-${VERSION}
        env:
          GITHUB_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}
          AWS_ECR: ${{ secrets.AWS_ECR }}

  upload_runner_image:
    runs-on: ubuntu-latest
    name: Push runner image to ECR
    needs: upload_release_to_pypi
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # TODO: research about this problem to fix it
      - name: Sleep 30 seconds because pypi sometimes have delay
        run: sleep 30

      - name: Build and push runner image
        working-directory: .
        run: |
          export VERSION=$(python setup.py --version)
          VERSION=$VERSION docker-compose -f runner/docker-compose.yml build
          docker tag splight-runner $AWS_ECR/splight-runner:${VERSION}
          docker push $AWS_ECR/splight-runner:${VERSION}
        env:
          AWS_ECR: ${{secrets.AWS_ECR}}
